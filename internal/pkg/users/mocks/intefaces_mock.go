// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/drakenchef/Tinder/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUsersUsecase is a mock of UsersUsecase interface.
type MockUsersUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsersUsecaseMockRecorder
}

// MockUsersUsecaseMockRecorder is the mock recorder for MockUsersUsecase.
type MockUsersUsecaseMockRecorder struct {
	mock *MockUsersUsecase
}

// NewMockUsersUsecase creates a new mock instance.
func NewMockUsersUsecase(ctrl *gomock.Controller) *MockUsersUsecase {
	mock := &MockUsersUsecase{ctrl: ctrl}
	mock.recorder = &MockUsersUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersUsecase) EXPECT() *MockUsersUsecaseMockRecorder {
	return m.recorder
}

// UsersList mocks base method.
func (m *MockUsersUsecase) UsersList(ctx context.Context) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersList", ctx)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersList indicates an expected call of UsersList.
func (mr *MockUsersUsecaseMockRecorder) UsersList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersList", reflect.TypeOf((*MockUsersUsecase)(nil).UsersList), ctx)
}

// MockUsersRepo is a mock of UsersRepo interface.
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo.
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance.
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// UsersList mocks base method.
func (m *MockUsersRepo) UsersList(arg0 context.Context) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersList", arg0)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersList indicates an expected call of UsersList.
func (mr *MockUsersRepoMockRecorder) UsersList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersList", reflect.TypeOf((*MockUsersRepo)(nil).UsersList), arg0)
}
