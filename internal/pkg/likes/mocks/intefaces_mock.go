// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/drakenchef/Tinder/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockLikesUsecase is a mock of LikesUsecase interface.
type MockLikesUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLikesUsecaseMockRecorder
}

// MockLikesUsecaseMockRecorder is the mock recorder for MockLikesUsecase.
type MockLikesUsecaseMockRecorder struct {
	mock *MockLikesUsecase
}

// NewMockLikesUsecase creates a new mock instance.
func NewMockLikesUsecase(ctrl *gomock.Controller) *MockLikesUsecase {
	mock := &MockLikesUsecase{ctrl: ctrl}
	mock.recorder = &MockLikesUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikesUsecase) EXPECT() *MockLikesUsecaseMockRecorder {
	return m.recorder
}

// LikeUser mocks base method.
func (m *MockLikesUsecase) LikeUser(arg0 context.Context, arg1 models.Likes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeUser indicates an expected call of LikeUser.
func (mr *MockLikesUsecaseMockRecorder) LikeUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeUser", reflect.TypeOf((*MockLikesUsecase)(nil).LikeUser), arg0, arg1)
}

// MutualLikeUser mocks base method.
func (m *MockLikesUsecase) MutualLikeUser(arg0 context.Context, arg1 models.Likes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MutualLikeUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MutualLikeUser indicates an expected call of MutualLikeUser.
func (mr *MockLikesUsecaseMockRecorder) MutualLikeUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MutualLikeUser", reflect.TypeOf((*MockLikesUsecase)(nil).MutualLikeUser), arg0, arg1)
}

// MockLikesRepo is a mock of LikesRepo interface.
type MockLikesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLikesRepoMockRecorder
}

// MockLikesRepoMockRecorder is the mock recorder for MockLikesRepo.
type MockLikesRepoMockRecorder struct {
	mock *MockLikesRepo
}

// NewMockLikesRepo creates a new mock instance.
func NewMockLikesRepo(ctrl *gomock.Controller) *MockLikesRepo {
	mock := &MockLikesRepo{ctrl: ctrl}
	mock.recorder = &MockLikesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikesRepo) EXPECT() *MockLikesRepoMockRecorder {
	return m.recorder
}

// LikeUser mocks base method.
func (m *MockLikesRepo) LikeUser(arg0 context.Context, arg1 models.Likes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeUser indicates an expected call of LikeUser.
func (mr *MockLikesRepoMockRecorder) LikeUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeUser", reflect.TypeOf((*MockLikesRepo)(nil).LikeUser), arg0, arg1)
}

// MutualLikeUser mocks base method.
func (m *MockLikesRepo) MutualLikeUser(arg0 context.Context, arg1 models.Likes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MutualLikeUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MutualLikeUser indicates an expected call of MutualLikeUser.
func (mr *MockLikesRepoMockRecorder) MutualLikeUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MutualLikeUser", reflect.TypeOf((*MockLikesRepo)(nil).MutualLikeUser), arg0, arg1)
}
